<?php
/**
 * CommentsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  StreamNetworkApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Live4.tv - Stream Networks API
 *
 * Omnichannel for live streaming on social networks  We're glad that you chose to use Live4.tv's API for managing your connection with social networks (currently Instagram).            We understand that Instagram currently restricts users from conducting live broadcasts without their official app.           However, our innovative API empowers users to go live on Instagram without relying on the app itself.        By leveraging our API, users gain access to a stream key, enabling them to seamlessly transmit their live broadcasts using popular software like OBS (Open Broadcaster Software).        This breakthrough feature provides users with the freedom to connect with their audience and share captivating live content on Instagram, all without the constraints of the official app.  The login flow:  ![login flow image](https://api-stream-network.live4.tv/mermaid-diagram-login-flow.png \"Login flow image\")
 *
 * The version of the OpenAPI document: 1.0
 * Contact: contato@live4.tv
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace StreamNetworkApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use StreamNetworkApi\ApiException;
use StreamNetworkApi\Configuration;
use StreamNetworkApi\HeaderSelector;
use StreamNetworkApi\ObjectSerializer;

/**
 * CommentsApi Class Doc Comment
 *
 * @category Class
 * @package  StreamNetworkApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CommentsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'commentsControllerGetComments' => [
            'application/json',
        ],
        'commentsControllerMuteComment' => [
            'application/json',
        ],
        'commentsControllerPostComment' => [
            'application/json',
        ],
        'commentsControllerStartListening' => [
            'application/json',
        ],
        'commentsControllerStopListening' => [
            'application/json',
        ],
        'commentsControllerUnmuteComment' => [
            'application/json',
        ],
    ];

    /**
         * @param ClientInterface $client
         * @param Configuration   $config
         * @param HeaderSelector  $selector
         * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
         */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation commentsControllerGetComments
     *
     * Get a list of comments (call it every minute)
     *
     * @param  string $x_api_key x_api_key (required)
     * @param  string $uuid The uuid of the live stream (required)
     * @param  float $last_comment_timestamp The timestamp of the last comment received. If requesting for the first time, you can send 0 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['commentsControllerGetComments'] to see the possible values for this operation
     *
     * @throws \StreamNetworkApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \StreamNetworkApi\Model\GetCommentsResponse
     */
    public function commentsControllerGetComments($x_api_key, $uuid, $last_comment_timestamp, string $contentType = self::contentTypes['commentsControllerGetComments'][0])
    {
        list($response) = $this->commentsControllerGetCommentsWithHttpInfo($x_api_key, $uuid, $last_comment_timestamp, $contentType);
        return $response;
    }

    /**
     * Operation commentsControllerGetCommentsWithHttpInfo
     *
     * Get a list of comments (call it every minute)
     *
     * @param  string $x_api_key (required)
     * @param  string $uuid The uuid of the live stream (required)
     * @param  float $last_comment_timestamp The timestamp of the last comment received. If requesting for the first time, you can send 0 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['commentsControllerGetComments'] to see the possible values for this operation
     *
     * @throws \StreamNetworkApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \StreamNetworkApi\Model\GetCommentsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function commentsControllerGetCommentsWithHttpInfo($x_api_key, $uuid, $last_comment_timestamp, string $contentType = self::contentTypes['commentsControllerGetComments'][0])
    {
        $request = $this->commentsControllerGetCommentsRequest($x_api_key, $uuid, $last_comment_timestamp, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\StreamNetworkApi\Model\GetCommentsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\StreamNetworkApi\Model\GetCommentsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StreamNetworkApi\Model\GetCommentsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StreamNetworkApi\Model\GetCommentsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StreamNetworkApi\Model\GetCommentsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation commentsControllerGetCommentsAsync
     *
     * Get a list of comments (call it every minute)
     *
     * @param  string $x_api_key (required)
     * @param  string $uuid The uuid of the live stream (required)
     * @param  float $last_comment_timestamp The timestamp of the last comment received. If requesting for the first time, you can send 0 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['commentsControllerGetComments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function commentsControllerGetCommentsAsync($x_api_key, $uuid, $last_comment_timestamp, string $contentType = self::contentTypes['commentsControllerGetComments'][0])
    {
        return $this->commentsControllerGetCommentsAsyncWithHttpInfo($x_api_key, $uuid, $last_comment_timestamp, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation commentsControllerGetCommentsAsyncWithHttpInfo
     *
     * Get a list of comments (call it every minute)
     *
     * @param  string $x_api_key (required)
     * @param  string $uuid The uuid of the live stream (required)
     * @param  float $last_comment_timestamp The timestamp of the last comment received. If requesting for the first time, you can send 0 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['commentsControllerGetComments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function commentsControllerGetCommentsAsyncWithHttpInfo($x_api_key, $uuid, $last_comment_timestamp, string $contentType = self::contentTypes['commentsControllerGetComments'][0])
    {
        $returnType = '\StreamNetworkApi\Model\GetCommentsResponse';
        $request = $this->commentsControllerGetCommentsRequest($x_api_key, $uuid, $last_comment_timestamp, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'commentsControllerGetComments'
     *
     * @param  string $x_api_key (required)
     * @param  string $uuid The uuid of the live stream (required)
     * @param  float $last_comment_timestamp The timestamp of the last comment received. If requesting for the first time, you can send 0 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['commentsControllerGetComments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function commentsControllerGetCommentsRequest($x_api_key, $uuid, $last_comment_timestamp, string $contentType = self::contentTypes['commentsControllerGetComments'][0])
    {

        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling commentsControllerGetComments'
            );
        }

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling commentsControllerGetComments'
            );
        }

        // verify the required parameter 'last_comment_timestamp' is set
        if ($last_comment_timestamp === null || (is_array($last_comment_timestamp) && count($last_comment_timestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $last_comment_timestamp when calling commentsControllerGetComments'
            );
        }


        $resourcePath = '/api/v1/live-streams/{uuid}/comments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $last_comment_timestamp,
            'lastCommentTimestamp', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);

        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }

        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation commentsControllerMuteComment
     *
     * Mute comments to the live stream
     *
     * @param  string $x_api_key x_api_key (required)
     * @param  string $uuid The uuid of the live stream (required)
     * @param  \StreamNetworkApi\Model\ToggleCommentRequest $toggle_comment_request toggle_comment_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['commentsControllerMuteComment'] to see the possible values for this operation
     *
     * @throws \StreamNetworkApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \StreamNetworkApi\Model\ToggleCommentResponse
     */
    public function commentsControllerMuteComment($x_api_key, $uuid, $toggle_comment_request, string $contentType = self::contentTypes['commentsControllerMuteComment'][0])
    {
        list($response) = $this->commentsControllerMuteCommentWithHttpInfo($x_api_key, $uuid, $toggle_comment_request, $contentType);
        return $response;
    }

    /**
     * Operation commentsControllerMuteCommentWithHttpInfo
     *
     * Mute comments to the live stream
     *
     * @param  string $x_api_key (required)
     * @param  string $uuid The uuid of the live stream (required)
     * @param  \StreamNetworkApi\Model\ToggleCommentRequest $toggle_comment_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['commentsControllerMuteComment'] to see the possible values for this operation
     *
     * @throws \StreamNetworkApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \StreamNetworkApi\Model\ToggleCommentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function commentsControllerMuteCommentWithHttpInfo($x_api_key, $uuid, $toggle_comment_request, string $contentType = self::contentTypes['commentsControllerMuteComment'][0])
    {
        $request = $this->commentsControllerMuteCommentRequest($x_api_key, $uuid, $toggle_comment_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\StreamNetworkApi\Model\ToggleCommentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\StreamNetworkApi\Model\ToggleCommentResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StreamNetworkApi\Model\ToggleCommentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StreamNetworkApi\Model\ToggleCommentResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StreamNetworkApi\Model\ToggleCommentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation commentsControllerMuteCommentAsync
     *
     * Mute comments to the live stream
     *
     * @param  string $x_api_key (required)
     * @param  string $uuid The uuid of the live stream (required)
     * @param  \StreamNetworkApi\Model\ToggleCommentRequest $toggle_comment_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['commentsControllerMuteComment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function commentsControllerMuteCommentAsync($x_api_key, $uuid, $toggle_comment_request, string $contentType = self::contentTypes['commentsControllerMuteComment'][0])
    {
        return $this->commentsControllerMuteCommentAsyncWithHttpInfo($x_api_key, $uuid, $toggle_comment_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation commentsControllerMuteCommentAsyncWithHttpInfo
     *
     * Mute comments to the live stream
     *
     * @param  string $x_api_key (required)
     * @param  string $uuid The uuid of the live stream (required)
     * @param  \StreamNetworkApi\Model\ToggleCommentRequest $toggle_comment_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['commentsControllerMuteComment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function commentsControllerMuteCommentAsyncWithHttpInfo($x_api_key, $uuid, $toggle_comment_request, string $contentType = self::contentTypes['commentsControllerMuteComment'][0])
    {
        $returnType = '\StreamNetworkApi\Model\ToggleCommentResponse';
        $request = $this->commentsControllerMuteCommentRequest($x_api_key, $uuid, $toggle_comment_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'commentsControllerMuteComment'
     *
     * @param  string $x_api_key (required)
     * @param  string $uuid The uuid of the live stream (required)
     * @param  \StreamNetworkApi\Model\ToggleCommentRequest $toggle_comment_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['commentsControllerMuteComment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function commentsControllerMuteCommentRequest($x_api_key, $uuid, $toggle_comment_request, string $contentType = self::contentTypes['commentsControllerMuteComment'][0])
    {

        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling commentsControllerMuteComment'
            );
        }

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling commentsControllerMuteComment'
            );
        }

        // verify the required parameter 'toggle_comment_request' is set
        if ($toggle_comment_request === null || (is_array($toggle_comment_request) && count($toggle_comment_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $toggle_comment_request when calling commentsControllerMuteComment'
            );
        }


        $resourcePath = '/api/v1/live-streams/{uuid}/comments/mute';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }

        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($toggle_comment_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($toggle_comment_request));
            } else {
                $httpBody = $toggle_comment_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation commentsControllerPostComment
     *
     * Post a comment into the live stream (all accounts)
     *
     * @param  string $x_api_key x_api_key (required)
     * @param  string $uuid The uuid of the live stream (required)
     * @param  \StreamNetworkApi\Model\PostCommentRequest $post_comment_request post_comment_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['commentsControllerPostComment'] to see the possible values for this operation
     *
     * @throws \StreamNetworkApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \StreamNetworkApi\Model\PostCommentResponse
     */
    public function commentsControllerPostComment($x_api_key, $uuid, $post_comment_request, string $contentType = self::contentTypes['commentsControllerPostComment'][0])
    {
        list($response) = $this->commentsControllerPostCommentWithHttpInfo($x_api_key, $uuid, $post_comment_request, $contentType);
        return $response;
    }

    /**
     * Operation commentsControllerPostCommentWithHttpInfo
     *
     * Post a comment into the live stream (all accounts)
     *
     * @param  string $x_api_key (required)
     * @param  string $uuid The uuid of the live stream (required)
     * @param  \StreamNetworkApi\Model\PostCommentRequest $post_comment_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['commentsControllerPostComment'] to see the possible values for this operation
     *
     * @throws \StreamNetworkApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \StreamNetworkApi\Model\PostCommentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function commentsControllerPostCommentWithHttpInfo($x_api_key, $uuid, $post_comment_request, string $contentType = self::contentTypes['commentsControllerPostComment'][0])
    {
        $request = $this->commentsControllerPostCommentRequest($x_api_key, $uuid, $post_comment_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\StreamNetworkApi\Model\PostCommentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\StreamNetworkApi\Model\PostCommentResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StreamNetworkApi\Model\PostCommentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StreamNetworkApi\Model\PostCommentResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StreamNetworkApi\Model\PostCommentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation commentsControllerPostCommentAsync
     *
     * Post a comment into the live stream (all accounts)
     *
     * @param  string $x_api_key (required)
     * @param  string $uuid The uuid of the live stream (required)
     * @param  \StreamNetworkApi\Model\PostCommentRequest $post_comment_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['commentsControllerPostComment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function commentsControllerPostCommentAsync($x_api_key, $uuid, $post_comment_request, string $contentType = self::contentTypes['commentsControllerPostComment'][0])
    {
        return $this->commentsControllerPostCommentAsyncWithHttpInfo($x_api_key, $uuid, $post_comment_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation commentsControllerPostCommentAsyncWithHttpInfo
     *
     * Post a comment into the live stream (all accounts)
     *
     * @param  string $x_api_key (required)
     * @param  string $uuid The uuid of the live stream (required)
     * @param  \StreamNetworkApi\Model\PostCommentRequest $post_comment_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['commentsControllerPostComment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function commentsControllerPostCommentAsyncWithHttpInfo($x_api_key, $uuid, $post_comment_request, string $contentType = self::contentTypes['commentsControllerPostComment'][0])
    {
        $returnType = '\StreamNetworkApi\Model\PostCommentResponse';
        $request = $this->commentsControllerPostCommentRequest($x_api_key, $uuid, $post_comment_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'commentsControllerPostComment'
     *
     * @param  string $x_api_key (required)
     * @param  string $uuid The uuid of the live stream (required)
     * @param  \StreamNetworkApi\Model\PostCommentRequest $post_comment_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['commentsControllerPostComment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function commentsControllerPostCommentRequest($x_api_key, $uuid, $post_comment_request, string $contentType = self::contentTypes['commentsControllerPostComment'][0])
    {

        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling commentsControllerPostComment'
            );
        }

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling commentsControllerPostComment'
            );
        }

        // verify the required parameter 'post_comment_request' is set
        if ($post_comment_request === null || (is_array($post_comment_request) && count($post_comment_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $post_comment_request when calling commentsControllerPostComment'
            );
        }


        $resourcePath = '/api/v1/live-streams/{uuid}/comments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }

        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_comment_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_comment_request));
            } else {
                $httpBody = $post_comment_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation commentsControllerStartListening
     *
     * Start listening comments of the live stream
     *
     * @param  string $x_api_key x_api_key (required)
     * @param  string $uuid The uuid of the live stream (required)
     * @param  \StreamNetworkApi\Model\StartListeningToCommentsRequest $start_listening_to_comments_request start_listening_to_comments_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['commentsControllerStartListening'] to see the possible values for this operation
     *
     * @throws \StreamNetworkApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \StreamNetworkApi\Model\StartListeningToCommentsResponse
     */
    public function commentsControllerStartListening($x_api_key, $uuid, $start_listening_to_comments_request, string $contentType = self::contentTypes['commentsControllerStartListening'][0])
    {
        list($response) = $this->commentsControllerStartListeningWithHttpInfo($x_api_key, $uuid, $start_listening_to_comments_request, $contentType);
        return $response;
    }

    /**
     * Operation commentsControllerStartListeningWithHttpInfo
     *
     * Start listening comments of the live stream
     *
     * @param  string $x_api_key (required)
     * @param  string $uuid The uuid of the live stream (required)
     * @param  \StreamNetworkApi\Model\StartListeningToCommentsRequest $start_listening_to_comments_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['commentsControllerStartListening'] to see the possible values for this operation
     *
     * @throws \StreamNetworkApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \StreamNetworkApi\Model\StartListeningToCommentsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function commentsControllerStartListeningWithHttpInfo($x_api_key, $uuid, $start_listening_to_comments_request, string $contentType = self::contentTypes['commentsControllerStartListening'][0])
    {
        $request = $this->commentsControllerStartListeningRequest($x_api_key, $uuid, $start_listening_to_comments_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\StreamNetworkApi\Model\StartListeningToCommentsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\StreamNetworkApi\Model\StartListeningToCommentsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StreamNetworkApi\Model\StartListeningToCommentsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StreamNetworkApi\Model\StartListeningToCommentsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StreamNetworkApi\Model\StartListeningToCommentsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation commentsControllerStartListeningAsync
     *
     * Start listening comments of the live stream
     *
     * @param  string $x_api_key (required)
     * @param  string $uuid The uuid of the live stream (required)
     * @param  \StreamNetworkApi\Model\StartListeningToCommentsRequest $start_listening_to_comments_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['commentsControllerStartListening'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function commentsControllerStartListeningAsync($x_api_key, $uuid, $start_listening_to_comments_request, string $contentType = self::contentTypes['commentsControllerStartListening'][0])
    {
        return $this->commentsControllerStartListeningAsyncWithHttpInfo($x_api_key, $uuid, $start_listening_to_comments_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation commentsControllerStartListeningAsyncWithHttpInfo
     *
     * Start listening comments of the live stream
     *
     * @param  string $x_api_key (required)
     * @param  string $uuid The uuid of the live stream (required)
     * @param  \StreamNetworkApi\Model\StartListeningToCommentsRequest $start_listening_to_comments_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['commentsControllerStartListening'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function commentsControllerStartListeningAsyncWithHttpInfo($x_api_key, $uuid, $start_listening_to_comments_request, string $contentType = self::contentTypes['commentsControllerStartListening'][0])
    {
        $returnType = '\StreamNetworkApi\Model\StartListeningToCommentsResponse';
        $request = $this->commentsControllerStartListeningRequest($x_api_key, $uuid, $start_listening_to_comments_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'commentsControllerStartListening'
     *
     * @param  string $x_api_key (required)
     * @param  string $uuid The uuid of the live stream (required)
     * @param  \StreamNetworkApi\Model\StartListeningToCommentsRequest $start_listening_to_comments_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['commentsControllerStartListening'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function commentsControllerStartListeningRequest($x_api_key, $uuid, $start_listening_to_comments_request, string $contentType = self::contentTypes['commentsControllerStartListening'][0])
    {

        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling commentsControllerStartListening'
            );
        }

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling commentsControllerStartListening'
            );
        }

        // verify the required parameter 'start_listening_to_comments_request' is set
        if ($start_listening_to_comments_request === null || (is_array($start_listening_to_comments_request) && count($start_listening_to_comments_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_listening_to_comments_request when calling commentsControllerStartListening'
            );
        }


        $resourcePath = '/api/v1/live-streams/{uuid}/comments/start-listening';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }

        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($start_listening_to_comments_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($start_listening_to_comments_request));
            } else {
                $httpBody = $start_listening_to_comments_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation commentsControllerStopListening
     *
     * Stop listening comments of the live stream
     *
     * @param  string $x_api_key x_api_key (required)
     * @param  string $uuid The uuid of the live stream (required)
     * @param  \StreamNetworkApi\Model\StopListeningToCommentsRequest $stop_listening_to_comments_request stop_listening_to_comments_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['commentsControllerStopListening'] to see the possible values for this operation
     *
     * @throws \StreamNetworkApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \StreamNetworkApi\Model\StopListeningToCommentsResponse
     */
    public function commentsControllerStopListening($x_api_key, $uuid, $stop_listening_to_comments_request, string $contentType = self::contentTypes['commentsControllerStopListening'][0])
    {
        list($response) = $this->commentsControllerStopListeningWithHttpInfo($x_api_key, $uuid, $stop_listening_to_comments_request, $contentType);
        return $response;
    }

    /**
     * Operation commentsControllerStopListeningWithHttpInfo
     *
     * Stop listening comments of the live stream
     *
     * @param  string $x_api_key (required)
     * @param  string $uuid The uuid of the live stream (required)
     * @param  \StreamNetworkApi\Model\StopListeningToCommentsRequest $stop_listening_to_comments_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['commentsControllerStopListening'] to see the possible values for this operation
     *
     * @throws \StreamNetworkApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \StreamNetworkApi\Model\StopListeningToCommentsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function commentsControllerStopListeningWithHttpInfo($x_api_key, $uuid, $stop_listening_to_comments_request, string $contentType = self::contentTypes['commentsControllerStopListening'][0])
    {
        $request = $this->commentsControllerStopListeningRequest($x_api_key, $uuid, $stop_listening_to_comments_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\StreamNetworkApi\Model\StopListeningToCommentsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\StreamNetworkApi\Model\StopListeningToCommentsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StreamNetworkApi\Model\StopListeningToCommentsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StreamNetworkApi\Model\StopListeningToCommentsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StreamNetworkApi\Model\StopListeningToCommentsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation commentsControllerStopListeningAsync
     *
     * Stop listening comments of the live stream
     *
     * @param  string $x_api_key (required)
     * @param  string $uuid The uuid of the live stream (required)
     * @param  \StreamNetworkApi\Model\StopListeningToCommentsRequest $stop_listening_to_comments_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['commentsControllerStopListening'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function commentsControllerStopListeningAsync($x_api_key, $uuid, $stop_listening_to_comments_request, string $contentType = self::contentTypes['commentsControllerStopListening'][0])
    {
        return $this->commentsControllerStopListeningAsyncWithHttpInfo($x_api_key, $uuid, $stop_listening_to_comments_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation commentsControllerStopListeningAsyncWithHttpInfo
     *
     * Stop listening comments of the live stream
     *
     * @param  string $x_api_key (required)
     * @param  string $uuid The uuid of the live stream (required)
     * @param  \StreamNetworkApi\Model\StopListeningToCommentsRequest $stop_listening_to_comments_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['commentsControllerStopListening'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function commentsControllerStopListeningAsyncWithHttpInfo($x_api_key, $uuid, $stop_listening_to_comments_request, string $contentType = self::contentTypes['commentsControllerStopListening'][0])
    {
        $returnType = '\StreamNetworkApi\Model\StopListeningToCommentsResponse';
        $request = $this->commentsControllerStopListeningRequest($x_api_key, $uuid, $stop_listening_to_comments_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'commentsControllerStopListening'
     *
     * @param  string $x_api_key (required)
     * @param  string $uuid The uuid of the live stream (required)
     * @param  \StreamNetworkApi\Model\StopListeningToCommentsRequest $stop_listening_to_comments_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['commentsControllerStopListening'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function commentsControllerStopListeningRequest($x_api_key, $uuid, $stop_listening_to_comments_request, string $contentType = self::contentTypes['commentsControllerStopListening'][0])
    {

        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling commentsControllerStopListening'
            );
        }

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling commentsControllerStopListening'
            );
        }

        // verify the required parameter 'stop_listening_to_comments_request' is set
        if ($stop_listening_to_comments_request === null || (is_array($stop_listening_to_comments_request) && count($stop_listening_to_comments_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $stop_listening_to_comments_request when calling commentsControllerStopListening'
            );
        }


        $resourcePath = '/api/v1/live-streams/{uuid}/comments/stop-listening';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }

        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($stop_listening_to_comments_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($stop_listening_to_comments_request));
            } else {
                $httpBody = $stop_listening_to_comments_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation commentsControllerUnmuteComment
     *
     * Unmute comments to the live stream
     *
     * @param  string $x_api_key x_api_key (required)
     * @param  string $uuid The uuid of the live stream (required)
     * @param  \StreamNetworkApi\Model\ToggleCommentRequest $toggle_comment_request toggle_comment_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['commentsControllerUnmuteComment'] to see the possible values for this operation
     *
     * @throws \StreamNetworkApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \StreamNetworkApi\Model\ToggleCommentResponse
     */
    public function commentsControllerUnmuteComment($x_api_key, $uuid, $toggle_comment_request, string $contentType = self::contentTypes['commentsControllerUnmuteComment'][0])
    {
        list($response) = $this->commentsControllerUnmuteCommentWithHttpInfo($x_api_key, $uuid, $toggle_comment_request, $contentType);
        return $response;
    }

    /**
     * Operation commentsControllerUnmuteCommentWithHttpInfo
     *
     * Unmute comments to the live stream
     *
     * @param  string $x_api_key (required)
     * @param  string $uuid The uuid of the live stream (required)
     * @param  \StreamNetworkApi\Model\ToggleCommentRequest $toggle_comment_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['commentsControllerUnmuteComment'] to see the possible values for this operation
     *
     * @throws \StreamNetworkApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \StreamNetworkApi\Model\ToggleCommentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function commentsControllerUnmuteCommentWithHttpInfo($x_api_key, $uuid, $toggle_comment_request, string $contentType = self::contentTypes['commentsControllerUnmuteComment'][0])
    {
        $request = $this->commentsControllerUnmuteCommentRequest($x_api_key, $uuid, $toggle_comment_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\StreamNetworkApi\Model\ToggleCommentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\StreamNetworkApi\Model\ToggleCommentResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StreamNetworkApi\Model\ToggleCommentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StreamNetworkApi\Model\ToggleCommentResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StreamNetworkApi\Model\ToggleCommentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation commentsControllerUnmuteCommentAsync
     *
     * Unmute comments to the live stream
     *
     * @param  string $x_api_key (required)
     * @param  string $uuid The uuid of the live stream (required)
     * @param  \StreamNetworkApi\Model\ToggleCommentRequest $toggle_comment_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['commentsControllerUnmuteComment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function commentsControllerUnmuteCommentAsync($x_api_key, $uuid, $toggle_comment_request, string $contentType = self::contentTypes['commentsControllerUnmuteComment'][0])
    {
        return $this->commentsControllerUnmuteCommentAsyncWithHttpInfo($x_api_key, $uuid, $toggle_comment_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation commentsControllerUnmuteCommentAsyncWithHttpInfo
     *
     * Unmute comments to the live stream
     *
     * @param  string $x_api_key (required)
     * @param  string $uuid The uuid of the live stream (required)
     * @param  \StreamNetworkApi\Model\ToggleCommentRequest $toggle_comment_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['commentsControllerUnmuteComment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function commentsControllerUnmuteCommentAsyncWithHttpInfo($x_api_key, $uuid, $toggle_comment_request, string $contentType = self::contentTypes['commentsControllerUnmuteComment'][0])
    {
        $returnType = '\StreamNetworkApi\Model\ToggleCommentResponse';
        $request = $this->commentsControllerUnmuteCommentRequest($x_api_key, $uuid, $toggle_comment_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'commentsControllerUnmuteComment'
     *
     * @param  string $x_api_key (required)
     * @param  string $uuid The uuid of the live stream (required)
     * @param  \StreamNetworkApi\Model\ToggleCommentRequest $toggle_comment_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['commentsControllerUnmuteComment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function commentsControllerUnmuteCommentRequest($x_api_key, $uuid, $toggle_comment_request, string $contentType = self::contentTypes['commentsControllerUnmuteComment'][0])
    {

        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling commentsControllerUnmuteComment'
            );
        }

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling commentsControllerUnmuteComment'
            );
        }

        // verify the required parameter 'toggle_comment_request' is set
        if ($toggle_comment_request === null || (is_array($toggle_comment_request) && count($toggle_comment_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $toggle_comment_request when calling commentsControllerUnmuteComment'
            );
        }


        $resourcePath = '/api/v1/live-streams/{uuid}/comments/unmute';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }

        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($toggle_comment_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($toggle_comment_request));
            } else {
                $httpBody = $toggle_comment_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
